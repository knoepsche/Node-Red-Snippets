[
    {
        "id": "609696582c501145",
        "type": "tab",
        "label": "ui-temp click evt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2e9ad39cd9fa8c97",
        "type": "tab",
        "label": "http + ws page",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e3269be6c383094c",
        "type": "tab",
        "label": "ui-temp button",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b90548eaef2af54d",
        "type": "tab",
        "label": "ui-temp btn-row",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e3947d5bbc316eda",
        "type": "tab",
        "label": "ui-temp get tabinfo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "06ce0c67de868d70",
        "type": "tab",
        "label": "ui-temp modal dialog",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "92f5052ca0054b2b",
        "type": "tab",
        "label": "ui-temp icons",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a56bde124d673012",
        "type": "tab",
        "label": "ui-temp list",
        "disabled": false,
        "info": ""
    },
    {
        "id": "839d658c3816e9e7",
        "type": "tab",
        "label": "duration tests",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e0e6e559.8f30d8",
        "type": "subflow",
        "name": "scan",
        "info": "",
        "category": "ui-table",
        "in": [
            {
                "x": 51,
                "y": 85,
                "wires": [
                    {
                        "id": "ffa780bb.8fd62"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 357,
                "y": 85,
                "wires": [
                    {
                        "id": "ffa780bb.8fd62",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ipString",
                "type": "str",
                "value": "http://192.168.2.",
                "ui": {
                    "icon": "font-awesome/fa-feed",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "start",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-arrow-circle-right",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "end",
                "type": "num",
                "value": "255",
                "ui": {
                    "icon": "font-awesome/fa-arrow-circle-left",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "suffix",
                "type": "str",
                "value": "/json",
                "ui": {
                    "icon": "font-awesome/fa-address-card-o",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-stethoscope"
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-controlÂ´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n- delete custom colum order and restore colum order from the tabulator json. This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n- delete custom column widths\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnWidth\"\n}\n```\n- delete tableCache\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"tableCache\"\n}\n```\n\n## background\nui-table warps the powerfull tabluator library. This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" Â°C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "82403a972ac7824f",
        "type": "subflow",
        "name": "CasparCG Server",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 580,
                "wires": [
                    {
                        "id": "db08daa3c753706c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1920,
                "y": 140,
                "wires": [
                    {
                        "id": "b776547b196b83a9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1920,
                "y": 440,
                "wires": [
                    {
                        "id": "e87fce072a8ca15e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1920,
                "y": 240,
                "wires": [
                    {
                        "id": "cfbe7b9ffeeb6cc9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "amcp"
        ],
        "outputLabels": [
            "osc",
            "amcp response",
            "connection state"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 1920,
            "y": 320,
            "wires": [
                {
                    "id": "2b64fa22837eca67",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a9ede7da.d5be78",
        "type": "subflow",
        "name": "Ventuz Websocket",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 160,
                "wires": [
                    {
                        "id": "65328275.46b76c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2540,
                "y": 280,
                "wires": [
                    {
                        "id": "606b8a07.6f94f4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2540,
                "y": 460,
                "wires": [
                    {
                        "id": "402751.504108b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2540,
                "y": 580,
                "wires": [
                    {
                        "id": "b1c509a4.2b64b8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2520,
                "y": 660,
                "wires": [
                    {
                        "id": "76390aaf.232114",
                        "port": 1
                    }
                ]
            },
            {
                "x": 2560,
                "y": 1120,
                "wires": [
                    {
                        "id": "2871ab07.0455a4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2560,
                "y": 1020,
                "wires": [
                    {
                        "id": "65328275.46b76c",
                        "port": 0
                    },
                    {
                        "id": "e85d721a.016a7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Director Remoting Commands"
        ],
        "outputLabels": [
            "Success",
            "Warnings",
            "Errors",
            "no Response Type",
            "State",
            "Debug Out"
        ],
        "status": {
            "x": 320,
            "y": 1000,
            "wires": [
                {
                    "id": "68224b3d.483c84",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b64d88976c628e2b",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "75ebc3ea4eb4a464",
        "type": "ui_group",
        "name": "Mainfolder",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cb07f0dfaa54fe86",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75ebc3ea4eb4a464",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "1986c06f10b8dbac",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75ebc3ea4eb4a464",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "25657a16d0e5bb66",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75ebc3ea4eb4a464",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "3358ad7c289f0792",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75ebc3ea4eb4a464",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "e8bee3146cf0f7f3",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75ebc3ea4eb4a464",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "68aac522c027a8e4",
        "type": "ui_group",
        "name": "click evt",
        "tab": "911a0d7d34b66434",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "911a0d7d34b66434",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e41a5353ed847470",
        "type": "ui_group",
        "name": "button",
        "tab": "911a0d7d34b66434",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c50b05a7746016ad",
        "type": "ui_group",
        "name": "tab info",
        "tab": "911a0d7d34b66434",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "150a555a50d00122",
        "type": "ui_group",
        "name": "modal",
        "tab": "911a0d7d34b66434",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "aca59d9b0a7fb387",
        "type": "ui_group",
        "name": "icons",
        "tab": "911a0d7d34b66434",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3d95651558452340",
        "type": "websocket-listener",
        "path": "/ws/receiveMessage",
        "wholemsg": "false"
    },
    {
        "id": "f80f4f0b2ec8881d",
        "type": "websocket-listener",
        "path": "/ws/publishMessage",
        "wholemsg": "false"
    },
    {
        "id": "372c2b26a8a8721f",
        "type": "ui_group",
        "name": "btn-row",
        "tab": "911a0d7d34b66434",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c7e1043144be7729",
        "type": "ui_group",
        "name": "Integracion pruebaa prueba pruebaa",
        "tab": "85eef7cbe34c88d0",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85eef7cbe34c88d0",
        "type": "ui_tab",
        "name": "DEV | URL Integraciones",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c2fc6f8ceca1aa7f",
        "type": "ui_group",
        "name": "Tools",
        "tab": "85eef7cbe34c88d0",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ffa780bb.8fd62",
        "type": "function",
        "z": "e0e6e559.8f30d8",
        "name": "scan subnet",
        "func": "var ipString = env.get('ipString') || '';\nvar start = env.get('start') || 1;\nvar end = env.get('end') || 255;\nvar suffix = env.get('suffix') || '/json';\n\nif (!msg.payload.hasOwnProperty(\"command\")) { // if no command scan complete subnet\n    for (let i=start; i<end+1; i++){\n        node.send({\"url\":ipString+i+\"/json\"})\n    }\n} else { // message form popup menue\n    switch (msg.payload.command){\n        case \"updateDevice\":\n            if (msg.payload.hasOwnProperty(\"$localip\") && \n                msg.payload.name===\"ESP Easy Mega\") {\n                    node.status({fill:\"green\", shape:\"dot\", text:\"scan \"+msg.payload.$localip})\n                    return({\"url\":\"http://\"+msg.payload.$localip+\"/json\"});\n            }\n            break;\n        case \"updateDevices\":\n            for (let i=start; i<end+1; i++){\n                node.send({\"url\":ipString+i+\"/json\"})\n            }\n            break;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 206,
        "y": 85,
        "wires": [
            []
        ],
        "icon": "node-red/white-globe.svg"
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n    \n// deep search for a column\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":\"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\")) {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n    msg.payload=[];\n    for (let device in tableData) {\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[device]) {\n            continue;\n        }\n        // merge edits into table\n        if (tableEdit && tableEdit.hasOwnProperty(device)) {\n            let tableRow = RED.util.cloneMessage(tableData[device]);\n            Object.keys(tableEdit[device]).forEach((field) => {\n                tableRow[field]=tableEdit[device][field];\n            });\n            msg.payload.push(tableRow);\n        } else {\n            msg.payload.push(tableData[device]);\n        }\n    }\n    \n    status.fill=\"blue\";\n    status.text+=\" \"+msg.payload.length+\" rows restored\";\n    return [{payload:status},msg];\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"unknown callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark es edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let device in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(device)) {\n                    msg.ignoredDevices.push({\"text\":device,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":device})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n}\n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "5d71eb4fc12fc649",
        "type": "udp in",
        "z": "82403a972ac7824f",
        "name": "UDP (OSC)",
        "iface": "",
        "port": "5253",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "68c6ae0726cc1b53",
        "type": "trigger",
        "z": "82403a972ac7824f",
        "name": "Trigger if 1 second no message",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "date",
        "duration": "1000",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 200,
        "wires": [
            [
                "bee4abd1000c7f01"
            ]
        ]
    },
    {
        "id": "4d180bf3fa58518f",
        "type": "catch",
        "z": "82403a972ac7824f",
        "name": "Catch Connection Errors",
        "scope": [
            "5d71eb4fc12fc649",
            "5eb3a0b5c12ce197"
        ],
        "uncaught": false,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "bee4abd1000c7f01"
            ]
        ]
    },
    {
        "id": "57acdaafa9b92d84",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "OSC Gate",
        "func": "if(msg.connected==false){\n    context.set(\"connection\", false);\n    msg.payload = \"disconnected\";\n    return [null, msg];\n}else{\n    if(context.get('connection')==false){\n        context.set(\"connection\", true);\n        return [msg, {payload:\"connected\"}];\n    }else{\n        return [msg, null];\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestartet wird\ncontext.set('connection', false);",
        "finalize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestoppt wird\ncontext.set('connection', false);",
        "libs": [],
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "b776547b196b83a9"
            ],
            [
                "1c5cb376266f10f6",
                "754e50d92a79f144",
                "cfbe7b9ffeeb6cc9",
                "2b64fa22837eca67"
            ]
        ],
        "outputLabels": [
            "Osc",
            "Connection"
        ],
        "info": "### all messages\nare put through to output 1 (Osc)\n\n### msg.connected (boolean)\n - **false** disables output 1\n - **true** enables output 1\n - generates a new message on output 2 (Connection)<br>\n    **payload** is `connected` or `disconnected`\n"
    },
    {
        "id": "5eb3a0b5c12ce197",
        "type": "tcp request",
        "z": "82403a972ac7824f",
        "name": "TCP (AMCP)",
        "server": "127.0.0.1",
        "port": "5250",
        "out": "sit",
        "splitc": " ",
        "x": 1110,
        "y": 440,
        "wires": [
            [
                "1c5cb376266f10f6"
            ]
        ],
        "info": "offen gehaltene AMCP-Connection"
    },
    {
        "id": "bee4abd1000c7f01",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "disconnected",
        "func": "const message = {connected:false}\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "57acdaafa9b92d84"
            ]
        ]
    },
    {
        "id": "754e50d92a79f144",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "Command Gate",
        "func": "if(msg.payload == 'connected'){\n    context.set('connected', true);\n    return [null, {reset:true}];\n}else if(msg.payload == 'disconnected'){\n    context.set('connected', false);\n    return [null, {reset:true}];\n}\nif(context.get('connected')==true){\n    return [msg, null];\n}else{\n    return [null, {reset:true}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestartet wird\ncontext.set('connected', false);",
        "finalize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestoppt wird\ncontext.set('connected', false);",
        "libs": [],
        "x": 880,
        "y": 440,
        "wires": [
            [
                "5eb3a0b5c12ce197"
            ],
            [
                "a24ee4a1eac91f81"
            ]
        ],
        "outputLabels": [
            "Data",
            "Reset"
        ]
    },
    {
        "id": "a24ee4a1eac91f81",
        "type": "simple-queue",
        "z": "82403a972ac7824f",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "754e50d92a79f144"
            ]
        ]
    },
    {
        "id": "1c5cb376266f10f6",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "Response Gate",
        "func": "if(msg.payload == 'connected'){\n    context.set('connected', true);\n    return [{reset:true}, null];\n}else if(msg.payload == 'disconnected'){\n    context.set('connected', false);\n    return [{reset:true}, null];\n}\nif(context.get('connected')==true){\n    return [msg, {trigger:true}];\n}else{\n    return [{reset:true}, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestartet wird\ncontext.set('connected', false);",
        "finalize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestoppt wird\ncontext.set('connected', false);",
        "libs": [],
        "x": 1340,
        "y": 440,
        "wires": [
            [
                "ccdc13643b29a2d5"
            ],
            [
                "a24ee4a1eac91f81"
            ]
        ],
        "outputLabels": [
            "Data / Reset",
            "Trigger"
        ]
    },
    {
        "id": "ccdc13643b29a2d5",
        "type": "join",
        "z": "82403a972ac7824f",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1570,
        "y": 440,
        "wires": [
            [
                "e87fce072a8ca15e"
            ]
        ]
    },
    {
        "id": "622aa063938f3563",
        "type": "split",
        "z": "82403a972ac7824f",
        "name": "",
        "splt": "\\r\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "9840e699f4618782"
            ]
        ]
    },
    {
        "id": "9840e699f4618782",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "add \\r\\n",
        "func": "msg.payload = msg.payload + '\\r\\n';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "a24ee4a1eac91f81"
            ]
        ]
    },
    {
        "id": "db08daa3c753706c",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "kill last \\r\\n",
        "func": "msg.requestid = msg._msgid;\nmsg.payload = msg.payload.slice(0, msg.payload.length-2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 580,
        "wires": [
            [
                "622aa063938f3563"
            ]
        ]
    },
    {
        "id": "cfbe7b9ffeeb6cc9",
        "type": "change",
        "z": "82403a972ac7824f",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CCG connection",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b776547b196b83a9",
        "type": "change",
        "z": "82403a972ac7824f",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CCG osc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e87fce072a8ca15e",
        "type": "change",
        "z": "82403a972ac7824f",
        "name": "delete items",
        "rules": [
            {
                "t": "delete",
                "p": "_queueCount",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_queuetimestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "ttl",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2b64fa22837eca67",
        "type": "function",
        "z": "82403a972ac7824f",
        "name": "State",
        "func": "if(msg.payload == \"disconnected\"){\n    msg.payload = ({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n}else{\n    msg.payload = ({fill:\"green\",shape:\"ring\",text:\"connected\"});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e206ab43.459d28",
        "type": "websocket out",
        "z": "a9ede7da.d5be78",
        "name": "Ventuz ws OUT",
        "server": "",
        "client": "",
        "x": 1220,
        "y": 160,
        "wires": []
    },
    {
        "id": "d169fab.ba59808",
        "type": "websocket in",
        "z": "a9ede7da.d5be78",
        "name": "Ventuz ws IN",
        "server": "",
        "client": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "72a6680a.1704c8"
            ]
        ]
    },
    {
        "id": "65328275.46b76c",
        "type": "function",
        "z": "a9ede7da.d5be78",
        "name": "Create Ventuz Message",
        "func": "let id = flow.get('lastID'); //read out the last assigned request ID from the flow memory area\nlet command = msg.payload; //read the passed Ventuz Commands\n\nif(typeof id == 'undefined'){ //If there is no request ID, start with 0\n    id = 0;\n}else if(id == 2147483647){ //If the highest possible value of a request ID is reached, start again at 0\n    id = 0;\n}\nlet info = {msgID:msg._msgid, timestamp:Date.now()};\n\nif(msg.topic !== undefined){\n    info['sourceTopic'] = msg.topic;\n}else{\n    info['sourceTopic'] = undefined;\n}\n\nif(typeof command.Command !== 'undefined'){\n    info['command'] = command.Command;\n}\n\nid++; //increment the request ID\n\n//create a message payload for Ventuz under the new request ID\ncommand.RequestID = id;\nlet message = {payload:command};\nlet flowId = 'RequestID_'+id.toString();\n\ncollectGarbage(); //delete stored Request Data rubbish\n\n//store the new request ID in the flow memory area\nflow.set('lastID',id);\nflow.set(flowId, info);\n\n//send the message\nreturn message;\n\n//if saved requests grow up to 1000 items then lookup for items which are more than 10 minutes old and set them ready for garbage collection\nfunction collectGarbage(){\n    let keys = flow.keys();\n    if(keys.length > 1000){\n        for(let i=0;i<keys.length;i++){\n            let info = flow.get(keys[i]);\n            if(info.timestamp !== undefined){\n                let timeDiff = Date.now() - info.timestamp;\n                if(timeDiff > 600000){\n                    flow.set(keys[i], undefined);\n                }\n            }\n        }\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "144c22bf.36fe8d"
            ]
        ],
        "info": "### erwartete Keys der Input-Message:\n - payload (Ventuz websocket JSON: Command + Parameters)\n - topic (= optional)\n - _msgid\n\n### ErgÃ¤nzung des Input-Payloads\n..mit einer RequestID. Es handelt sich um die fortlaufende Inkrementation einer 32bit-Integer-Zahl, die bei Erreichen des HÃ¶chstwerts wieder bei 0 beginnt.\n\n### ein Info-Objekt wird erstellt mit den Keys:\n - msgID\n - timestamp\n - sourceTopic\n - command (keine Parameter)\n\n### im flow wird:\n - unter der RequestID das Info-Objekt gespeichert\n - unter lastID die RequestID gespeichert\n - RequestID/Info-Objekte die Ã¤lter sind als 10 Minuten, werden bei Anwachsen des Flows auf Ã¼ber 1000 EintrÃ¤ge auf undefined gesetzt und zur GarbageCollection freigegeben\n\n### Ausgabe\nder ergÃ¤nzte Payload wird weitergeleitet\n"
    },
    {
        "id": "144c22bf.36fe8d",
        "type": "json",
        "z": "a9ede7da.d5be78",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 160,
        "wires": [
            [
                "e206ab43.459d28"
            ]
        ]
    },
    {
        "id": "72a6680a.1704c8",
        "type": "json",
        "z": "a9ede7da.d5be78",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 640,
        "wires": [
            [
                "e85d721a.016a7"
            ]
        ]
    },
    {
        "id": "e85d721a.016a7",
        "type": "function",
        "z": "a9ede7da.d5be78",
        "name": "Read Ventuz Message",
        "func": "let responseMsg = msg;\nresponseMsg.req = {};//request object\ntry{\n    let flowID = 'RequestID_'+responseMsg.payload.RequestID.toString(); //get Request_ID\n    let info = flow.get(flowID); //get stored Request Data\n    responseMsg.req.command = info['command']; //fill request object\n    responseMsg.req.msgid = info['msgID'];\n    responseMsg.req.topic = info['sourceTopic'];\n    flow.set(flowID, undefined);//set stored Request Data ready for garbage collection\n}catch(err){\n    responseMsg.req.command = undefined; //on Error set request object fields to undefined\n    responseMsg.req.msgid = undefined;\n    responseMsg.req.topic = undefined;\n}finally{\n    return responseMsg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            [
                "76390aaf.232114"
            ]
        ],
        "outputLabels": [
            "ws response"
        ],
        "info": " * 1. Auslesen der im Payload enthaltenen RequestID\n * 2. Ein msg.req Object wird gesetzt:\n   -  command (ursprÃ¼ngliches command)\n   -  msgid (ursprÃ¼ngliche _msgid)\n   -  topic (ursprÃ¼ngliches topic)\n * 3. im flow wird der Eintrag der RequestID auf undefined gesetzt\n * 4. existiert der Eintrag nicht im flow werden alle Keys von msg.req auf undefined gesetzt\n * 5. Ausgabe der message\n\n"
    },
    {
        "id": "606b8a07.6f94f4",
        "type": "change",
        "z": "a9ede7da.d5be78",
        "name": "Response Result",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Result",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 280,
        "wires": [
            []
        ],
        "info": " * 1. Payload = Result\n * 2. msgid = ursprÃ¼ngliche Message\n * 3. resultType = Angabe aus dem Director Remoting IF"
    },
    {
        "id": "402751.504108b",
        "type": "change",
        "z": "a9ede7da.d5be78",
        "name": "Response Warnings",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Warnings",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 460,
        "wires": [
            []
        ],
        "info": " * 1. Payload = Warnings\n * 2. msgid = ursprÃ¼ngliche Message\n * 3. resultType = Angabe aus dem Director Remoting IF"
    },
    {
        "id": "b1c509a4.2b64b8",
        "type": "change",
        "z": "a9ede7da.d5be78",
        "name": "Response Errors",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Errors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 580,
        "wires": [
            []
        ],
        "info": " * 1. Payload = Errors\n * 2. msgid = ursprÃ¼ngliche Message\n * 3. resultType = Angabe aus dem Director Remoting IF"
    },
    {
        "id": "b1ddc400.ff8668",
        "type": "switch",
        "z": "a9ede7da.d5be78",
        "name": "Response Warnings?",
        "property": "payload.Warnings",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1780,
        "y": 280,
        "wires": [
            [
                "606b8a07.6f94f4"
            ],
            [
                "402751.504108b"
            ]
        ],
        "info": "Outputs:\n1. alle Responses\n2. Responses ohne leeres Warning Array"
    },
    {
        "id": "90a87321.d0d4d",
        "type": "switch",
        "z": "a9ede7da.d5be78",
        "name": "Response Code?",
        "property": "payload.Code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 300,
        "wires": [
            [
                "b1ddc400.ff8668"
            ],
            [
                "b1c509a4.2b64b8"
            ]
        ],
        "info": "Outputs:\n * 1. Responses mit Erfolgs-Code 0\n * 2. Responses mit anderen Codes"
    },
    {
        "id": "76390aaf.232114",
        "type": "switch",
        "z": "a9ede7da.d5be78",
        "name": "Response?",
        "property": "msg.req",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "hask",
                "v": "msgid",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 640,
        "wires": [
            [
                "90a87321.d0d4d"
            ],
            []
        ],
        "info": "Outputs:\n * 1. Responses auf Requests\n * 2. Messages ohne Request"
    },
    {
        "id": "68224b3d.483c84",
        "type": "status",
        "z": "a9ede7da.d5be78",
        "name": "ws-Status",
        "scope": [
            "e206ab43.459d28",
            "d169fab.ba59808"
        ],
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "2871ab07.0455a4"
            ]
        ],
        "info": "Auslesen des Status in den 2 Websocket Nodes"
    },
    {
        "id": "2871ab07.0455a4",
        "type": "change",
        "z": "a9ede7da.d5be78",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"status\":msg.status.text,\t    \"event\":msg.status.event,\t    \"source\":msg.status.source.name\t}",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "status",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "e43fd34ea3238e96",
        "type": "ui_template",
        "z": "609696582c501145",
        "group": "68aac522c027a8e4",
        "name": "",
        "order": 9,
        "width": "9",
        "height": "4",
        "format": "<style>\n\n#box{\n\n    width: 200px;\n    height: 200px;\n    background: blue;\n}\n\n\n</style>\n\n<div    id = \"box\" ng-click=\"clickSend($event)\">   </div>\n\n\n<script>\n    \n    scope.clickSend = function(evt){\n        alert(\"Test of the Click\");\n        console.log(evt);\n        this.send({payload:\"test\"});\n    }\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 440,
        "y": 220,
        "wires": [
            [
                "7eda20409119f468"
            ]
        ]
    },
    {
        "id": "7eda20409119f468",
        "type": "debug",
        "z": "609696582c501145",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 220,
        "wires": []
    },
    {
        "id": "ba970ff81e76a4b5",
        "type": "http in",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "url": "/mysite",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "b472f3bd80118729"
            ]
        ]
    },
    {
        "id": "3b745d6a2ceb8306",
        "type": "http in",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "url": "/mysitepost",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "d4260a6b455e8fdc"
            ]
        ]
    },
    {
        "id": "3fab72f8e8216ad7",
        "type": "http response",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 500,
        "wires": []
    },
    {
        "id": "26d4f581d2a2416b",
        "type": "template",
        "z": "2e9ad39cd9fa8c97",
        "name": "CSS",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": ":root {\n\t--icon: #b0bfd8;\n}\n\nbody {\n\twidth: 100%;\n\theight: 100vh;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\toverflow: hidden;\n\tmargin: 0;\n\tbackground-color: #e3efe8;\n\tbackground-image: linear-gradient(315deg, #e3efe8 0%, #96a7cf 74%);\n}\n\n\nnav.menu {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tposition: relative;\n\theight: 150px;\n\tpadding: 0 29px 10px;\n\tbackground: #fff0;\n\talign-items: flex-end;\n\twidth: 700px;\n}\n\nnav.menu:before {\n\tcontent: \"\";\n\twidth: 100%;\n\theight: 150px;\n\tbackground: #181818;\n\tposition: absolute;\n\tleft: 0;\n\tbottom: 0;\n\tborder-radius: 20px;\n\tz-index: -1;\n\tbox-shadow: 1px 1px 2px 0px #fff;\n}\n\ninput { display: none; }\n\n.break {\n  flex-basis: 100%;\n  height: 0;\n}\n\nlabel {\n\ttext-decoration: none;\n\tfont-family: sans-serif;\n\ttext-transform: uppercase;\n\tfont-size: 14px;\n\tmin-width: 100px;\n\theight: 100px;\n\tmargin: 10px 10px 20px;\n\ttext-align: center;\n\tdisplay: inline-grid;\n\talign-items: end;\n\tcolor: #b0bfd8;\n\tposition: relative;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tcursor: pointer;\n}\n\nlabel:hover {\n\tcolor: #fff;\n\ttext-shadow: 0 0 5px #fff, 0 0 10px #fff;\n}\n\ninput:checked + label {\n\tcolor: #fff;\n\theight: 130px;\n}\n\n.selector {\n\t--hole: #2196f3;\n\tbackground: \n\t\tradial-gradient(circle at 50% 50%, #fff8 30px, #fff0 45px, #fff 50px, #fff0 50px 100%), \n\t\tradial-gradient(circle at 50% 50%, var(--hole) 0 45px, #fff0 50px 100%),\n\t\tradial-gradient(circle at 50% 75px, #181818 0 70px, #fff0 71px 100%);\n\twidth: 95px;\n\theight: 95px;\n\tposition: absolute;\n\tbottom: 47px;\n\tleft: 0;\n\tz-index: -1;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tborder: 19px solid #181818;\n\tborder-radius: 100%;\n}\n\n#m-home:checked ~ .selector {\n\tleft: 23px;\n}\n\n#m-search:checked ~ .selector {\n\tleft: 143px;\n\tfilter: hue-rotate(535deg);\n}\n\n#m-notification:checked ~ .selector {\n\tleft: 263px;\n\tfilter: hue-rotate(950deg);\n}\n\n#m-favorites:checked ~ .selector {\n\tleft: 383px;\n\tfilter: hue-rotate(1580deg);\n}\n\n#m-profile:checked ~ .selector {\n\tleft: 502px;\n\tfilter: hue-rotate(1850deg);\n}\n\n#m-profile2:checked ~ .selector {\n\tleft: 621px;\n\tfilter: hue-rotate(1850deg);\n}\n\n.selector:after {\n\tcontent: \"\";\n\tposition: absolute;\n\tbottom: -80px;\n\twidth: 80px;\n\theight: 10px;\n\tbackground: #181818;\n\tleft: calc(50% - 40px);\n\tborder-radius: 5px 5px 15px 15px;\n}\n\ninput:checked ~ .selector:after {\n\tbox-shadow: 0 -17px 35px 8px var(--hole);\n}\n\n\n\n\n\n\n\n/*** ICONS ***/\nlabel:before,\nlabel:after {\n\tcontent: \"\";\n\tposition: absolute;\n\tbox-sizing: border-box;\n\ttransition: all 0.5s ease 0s;\n}\n\nlabel:hover:before,\nlabel:hover:after {\n\tfilter: brightness(1.5) drop-shadow(0px 0px 4px #fff);\n\ttransition: all 0.5s ease 0s;\n}\n\ninput:checked + label:before, \ninput:checked + label:after {\n\tfilter: brightness(1.5) drop-shadow(0px 0px 2px var(--sel));\n\ttransition: all 0.5s ease 0s;\n}\n\n\nlabel[for=m-home]:before {\n\twidth: 40px;\n\theight: 40px;\n\tleft: 30px;\n\ttop: 30px;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tborder-radius: 2px;\n\tbackground: \n\t\tconic-gradient(from 90deg at 65% 60%, var(--icon) 0 25%, #fff0 0 100%),\n\t\tconic-gradient(from 180deg at 35% 60%, var(--icon) 0 25%, #fff0 0 100%),\n\t\tconic-gradient(from 135deg at 50% 0%, var(--icon) 0 25%, #fff0 0 100%);\n\tbackground-repeat: no-repeat;\n\tbackground-size: 100% 100%, 100% 100%, 100% 27px;\n}\n\nlabel[for=m-home]:after {\n\twidth: 40px;\n\theight: 40px;\n\tleft: 30px;\n\ttop: 24px;\n\tborder: 6px solid var(--icon);\n\tborder-right-width: 0;\n\tborder-bottom-width: 0;\n\ttransform: rotate(45deg);\n\tborder-radius: 5px;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n}\n\n\nlabel[for=m-search]:before {\n\twidth: 40px;\n\theight: 40px;\n\tleft: 20px;\n\ttop: 17px;\n\tborder: 6px solid var(--icon);\n\tborder-radius: 100%;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n}\n\nlabel[for=m-search]:after {\n\twidth: 22px;\n\theight: 9px;\n\tleft: 60px;\n\ttop: 50px;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tbackground: var(--icon);\n\ttransform-origin: left top;\n\ttransform: rotate(45deg);\n\tborder-radius: 0 10px 10px 0;\n}\n\n\nlabel[for=m-notification]:before {\n\twidth: 50px;\n\theight: 42px;\n\tleft: 25px;\n\ttop: 20px;\n\tz-index: 1;\n\tborder-radius: 30px 30px 0 0;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tbackground: \n\t\tlinear-gradient(90deg, #fff0 0 6px, var(--icon) 0 calc(100% - 6px), #fff0 calc(100% - 6px) 100%), \n\t\tconic-gradient(from 135deg at 50% 33%, var(--icon) 0 25%, #fff0 0 100%);\n}\n\nlabel[for=m-notification]:after {\n\twidth: 10px;\n\theight: 57px;\n\tleft: 45px;\n\ttop: 14px;\n\tz-index: 0;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tbackground: radial-gradient(circle at 50% 6px, var(--icon) 3px, #fff0 4px 100%), #fff0;\n\ttransform-origin: left top;\n\tborder-bottom: 6px solid var(--icon);\n\tborder-radius: 5px;\n}\n\n\nlabel[for=m-favorites]:before {\n\twidth: 50px;\n\theight: 50px;\n\tleft: 18px;\n\ttop: -9px;\n\ttransition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s;\n\tbackground: \n\t\tradial-gradient(circle at 16px 16px, var(--icon) 0 16px, #fff0 calc(16px + 1px) 100%), \n\t\tradial-gradient(circle at 34px 34px, var(--icon) 0 16px, #fff0 calc(16px + 1px) 100%), \n\t\tlinear-gradient(45deg, var(--icon) 0 37px, #fff0 38px 100%);\n\tborder-radius: 17px 22px 17px 4px;\n\ttransform: rotate(-45deg);\n\ttransform-origin: center right;\n}\n\n\nlabel[for=m-profile]:before {\n\twidth: 50px;\n\theight: 54px;\n\ttop: 16px;\n\tbackground: \n\t\tradial-gradient(circle at 50% 15px, var(--icon) 0 12px, #fff0 13px 100%),\n\t\tradial-gradient(circle at 50% 100%, var(--icon) 0 22px, #fff0 23px 100%);\n\tleft: 25px;\n\tborder-radius: 8px;\n}\n\nlabel[for=m-profile2]:before {\n\twidth: 50px;\n\theight: 54px;\n\ttop: 16px;\n\tbackground: \n\t\tradial-gradient(circle at 50% 15px, var(--icon) 0 12px, #fff0 13px 100%),\n\t\tradial-gradient(circle at 50% 100%, var(--icon) 0 22px, #fff0 23px 100%);\n\tleft: 25px;\n\tborder-radius: 8px;\n}\n\n\ninput:checked + label {\n\tcolor: var(--sel);\n\ttext-shadow: 0 0 5px var(--sel), 0 0 10px var(--sel);\n}\t\n\ninput:checked + label[for=m-home] {\n\t--sel: #39a1f4;\n}\n\ninput:checked + label[for=m-search] {\n\t--sel:  #f48d4e;\n}\n\ninput:checked + label[for=m-notification] {\n\t--sel:  #84a91c;\n}\n\ninput:checked + label[for=m-favorites] {\n\t--sel:  #ff6275;\n\theight: 125px;\n}\n\ninput:checked + label[for=m-profile] {\n\t--sel:  #9d74ff;\n}\n\ninput:checked + label[for=m-profile2] {\n\t--sel:  #9d74ff;\n}\n\n@media only screen and (orientation: portrait) {\n\tlabel { color: transparent !important; text-shadow: none !important;}\n}",
        "x": 810,
        "y": 400,
        "wires": [
            [
                "f59a578062d5b8fb"
            ]
        ]
    },
    {
        "id": "27888db4b1b6071e",
        "type": "template",
        "z": "2e9ad39cd9fa8c97",
        "name": "JavaScript",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "const menu = document.getElementById('m');\nconst items =[\"m-home\", \"m-search\", \"m-notification\", \"m-favorites\", \"m-profile\", \"m-profile2\"];\nconst url = location.host;\nconst incomingUrl = `ws://${url}/ws/receiveMessage`;\nconst outgoingUrl = `ws://${url}/ws/publishMessage`;\nlet socket1;\nlet socket2;\n\nconst listener = async function(evt){\n    if(items.includes(evt.target.id)){\n        let obj;\n        const url = origin + '/mysitepost';\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"item\":evt.target.id}),\n        })\n        .then(res => res.json())\n        .then(data => obj = data)\n        .then(() => {\n            document.getElementById('log').innerHTML = obj.content;\n            console.log(obj);\n        })\n        .catch(err => console.error(err))\n    }\n}\n\nconst sendMessage = function() {\n   let message = document.getElementById('message_send')\n   let messageRaw = message.textContent\n   console.log(`sending message ${messageRaw}`)\n   socket1.send(messageRaw);\n}\n\nfunction initWS(){\n    socket1 = new WebSocket(incomingUrl);\n    socket2 = new WebSocket(outgoingUrl);\n    socket2.onopen = function() {\n        console.log(\"client connected\")\n        const message = {\n            'cmd': 'Client connected'\n        };\n        socket1.send(JSON.stringify(message));\n    };\n\n    socket2.onclose = function(){\n       console.log('Connection closed');\n    };\n\n    socket2.onerror = function(error) {\n       console.log('Error detected: ' + error);\n    };\n\n    socket2.onmessage = function(e) {\n       const server_message = JSON.parse(e.data);\n       console.log(server_message);\n       switch (server_message.cmd){\n           case 'm-favorites':\n                document.getElementById('m-favorites').click();\n                break;\n            default:\n       }\n    }\n}\n \nwindow.addEventListener(\"load\", initWS, false);\nmenu.addEventListener('click', e => listener(e), false);\n\n\n\n",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "26d4f581d2a2416b"
            ]
        ]
    },
    {
        "id": "45ecec61b9944fe0",
        "type": "http response",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 400,
        "wires": []
    },
    {
        "id": "f59a578062d5b8fb",
        "type": "template",
        "z": "2e9ad39cd9fa8c97",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n  <head>\n\n    <style>{{{payload.style}}}</style>\n </head>\n <body>\n<div>\n<div style=\"flex-direction: column;\">\n<nav class=\"menu\" id=\"m\">\n\n\t<input type=\"radio\" name=\"nav-item\" id=\"m-home\" checked><label for=\"m-home\">Home</label>\n\t<input type=\"radio\" name=\"nav-item\" id=\"m-search\"><label for=\"m-search\">Search</label>\n\t<input type=\"radio\" name=\"nav-item\" id=\"m-notification\"><label for=\"m-notification\">Notification</label>\n\t<input type=\"radio\" name=\"nav-item\" id=\"m-favorites\"><label for=\"m-favorites\">Favorites</label>\n\t<input type=\"radio\" name=\"nav-item\" id=\"m-profile\"><label for=\"m-profile\">Profile</label>\n\t\t<input type=\"radio\" name=\"nav-item\" id=\"m-profile2\"><label for=\"m-profile2\">Profile2</label>\n\n\t<div class=\"selector\"></div>\n</nav>\n</div>\n\n<div id=\"log\"><br>initial content</div>\n</div>\n<script>{{{payload.script}}}</script>\n</body>",
        "x": 970,
        "y": 400,
        "wires": [
            [
                "45ecec61b9944fe0"
            ]
        ]
    },
    {
        "id": "b472f3bd80118729",
        "type": "function",
        "z": "2e9ad39cd9fa8c97",
        "name": "msg.url = \"mysitepost\";",
        "func": "msg.url = \"mysitepost\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "27888db4b1b6071e"
            ]
        ]
    },
    {
        "id": "d4260a6b455e8fdc",
        "type": "function",
        "z": "2e9ad39cd9fa8c97",
        "name": "return msg.payload to client",
        "func": "msg.payload.message = \"The included data was submitted and available in the msg.payload!\";\nmsg.payload.content = '<br>Some ' + msg.payload.item + ' content!';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "3fab72f8e8216ad7"
            ]
        ]
    },
    {
        "id": "22d5d38fdafc643a",
        "type": "websocket in",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "server": "3d95651558452340",
        "client": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "2513aacddd363d67",
                "c66e0e196c66220f"
            ]
        ]
    },
    {
        "id": "2513aacddd363d67",
        "type": "function",
        "z": "2e9ad39cd9fa8c97",
        "name": "return payload",
        "func": "return {payload: msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "6b1f9ae8446fe8be"
            ]
        ]
    },
    {
        "id": "6b1f9ae8446fe8be",
        "type": "websocket out",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "server": "f80f4f0b2ec8881d",
        "client": "",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "ced491f8d6565fed",
        "type": "inject",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"cmd\":\"m-favorites\"}",
        "payloadType": "json",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "2513aacddd363d67"
            ]
        ]
    },
    {
        "id": "c66e0e196c66220f",
        "type": "debug",
        "z": "2e9ad39cd9fa8c97",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 260,
        "wires": []
    },
    {
        "id": "ca8ec0134f07fc3d",
        "type": "ui_button",
        "z": "e3269be6c383094c",
        "name": "",
        "group": "e41a5353ed847470",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "check",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "858c49bfd78319a9"
            ]
        ]
    },
    {
        "id": "858c49bfd78319a9",
        "type": "ui_template",
        "z": "e3269be6c383094c",
        "group": "e41a5353ed847470",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .break {\n        flex-basis: 100%;\n        height: 100px;\n        width: 30px;\n    }\n    .button-ripple{\n        overflow:hidden;\n        width:100%;\n        height:100%;\n        left:0;\n        top: 0;\n        position:absolute;\n        display:block;\n        z-index:1;\n        border-radius: inhirit;\n        background-clip: padding-box;\n        background-color: rgba(255,255,255,0);\n        transition: all 0.55s cubic-bezier(0,0,0.6,1) ;\n        -webkit-transform: translateZ(1);\n    }\n    .button-ripple:active{\n        left:50%;\n        width:0%;\n        background-color: rgba(255,255,255,0.1);\n        transition: all 0s;\n    }\n</style>\n\n    <div class=\"nr-dashboard-button container-right-margin\">\n        <md-tooltip md-direction=\"center\">My Button</md-tooltip>\n        <button id=\"myButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"mybutton\">\n            <ui-icon ng-show=\"true\" icon=\"mi-play_arrow\" ng-style=\"{color:GetIconColor()}\" aria-hidden=\"false\">\n        \t\t<div ng-if=\"iconType==='mi'\" style=\"display:inline-block; margin:auto; line-height:initial;\">\n        \t\t\t<i class=\"material-icons mi-play_arrow\" ng-class=\"icon\">mybutton</i>\n        \t\t</div>\n            </ui-icon>\n            <span>my Label</span>\n            <div class=\"button-ripple\"></div>\n        </button>\n    </div>\n    <script type=\"text/javascript\">\n      \n     // Here's the code that doesn't work\n    (function(scope) {\n        scope.GetIconColor = function(){return \"white\"}\n        scope.OnButtonClick = function(evt){\n            switch(evt.currentTarget.id){\n                case \"myButton_ccd3e21e\":\n                    scope.send({payload: \"My Button clicked\"});\n                    break;\n                default:\n                    //console.log(evt.currentTarget.id);\n                    break;\n            }\n        }\n        scope.$watch('msg', function(msg) {\n            if (msg.payload.match('check')) {\n                alert(msg.payload);\n                scope.send({payload: \"payload sent\"});\n            }\n        });\n    })(scope);\n    \n    </script>\n  </body>\n</html>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5ee80c7e1debfa3e",
        "type": "ui_template",
        "z": "b90548eaef2af54d",
        "group": "372c2b26a8a8721f",
        "name": "VideoFrame",
        "order": 1,
        "width": 15,
        "height": "2",
        "format": "<style>\n    .break {\n        flex-basis: 100%;\n        height: 100px;\n        width: 30px;\n    }\n    .video-button{\n        z-index:1; \n        padding:0px;\n    }\n    .video-container{\n        left: 0px; \n        top: 0px; \n        width: calc(100% - 4*6px/5); \n        height: 48px; \n        padding-left:0!important;\n        padding-right:0!important;\n    }\n    .container-right-margin{\n        margin-right:6px!important;\n    }\n    .button-ripple{\n        overflow:hidden;\n        width:100%;\n        height:100%;\n        left:0;\n        top: 0;\n        position:absolute;\n        display:block;\n        z-index:1;\n        border-radius: inhirit;\n        background-clip: padding-box;\n        background-color: rgba(255,255,255,0);\n        transition: all 0.55s cubic-bezier(0,0,0.6,1) ;\n        -webkit-transform: translateZ(1);\n    }\n    .button-ripple:active{\n        left:50%;\n        width:0%;\n        background-color: rgba(255,255,255,0.1);\n        transition: all 0s;\n    }\n    .flipped {\n        display: Inline-block;\n        transform: scale(-1, 1);\n        -moz-transform: scale(-1, 1);\n        -webkit-transform: scale(-1, 1);\n        -o-transform: scale(-1, 1);\n        -ms-transform: scale(-1, 1);\n    }\n</style>\n\n\n<div layout=\"row\">\n    <div class=\"video-container nr-dashboard-button container-right-margin\">\n        <md-tooltip md-direction=\"center\">Play/Pause</md-tooltip>\n        <button id=\"videoPlayPauseButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple video-button\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"playpausebutton\">\n            <ui-icon ng-show=\"true\" icon=\"{{GetPlayPauseIcon()}}\" ng-style=\"{color:GetIconColor()}\" aria-hidden=\"false\">\n        \t\t<div ng-if=\"iconType==='mi'\" style=\"display:inline-block; margin:auto; line-height:initial;\">\n        \t\t\t<i class=\"material-icons {{GetPlayPauseIcon()}}\" ng-class=\"icon\">playpause</i>\n        \t\t</div>\n            </ui-icon>\n            <span ng-bind-html=\"GetButtonLabel()\"></span>\n            <div class=\"button-ripple\"></div>\n        </button>\n    </div>\n    <div class=\"video-container nr-dashboard-button container-right-margin\">\n        <md-tooltip md-direction=\"center\">Left Locator</md-tooltip>\n        <button id=\"videoLeftLocatorButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple video-button\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"leftlocatorbutton\">\n            <ui-icon ng-show=\"true\" icon=\"mi-logout\" ng-style=\"{color:GetIconColor()}\" aria-hidden=\"false\">\n        \t\t<div ng-if=\"iconType==='mi'\" style=\"display:inline-block; margin:auto; line-height:initial;\">\n        \t\t\t<i class=\"material-icons mi-logout\" ng-class=\"icon\">logout</i>\n        \t\t</div>\n            </ui-icon>\n            <span ng-bind-html=\"GetButtonLabel()\"></span>\n            <div class=\"button-ripple\"></div>\n        </button>\n    </div>\n    <div class=\"video-container nr-dashboard-button container-right-margin\">\n        <md-tooltip md-direction=\"center\">Right Locator</md-tooltip>\n        <button id=\"videoRightLocatorButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple video-button\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"rightlocatorbutton\">\n            <ui-icon class=\"flipped\" ng-show=\"true\" icon=\"mi-logout\" ng-style=\"{color:GetIconColor()}\" aria-hidden=\"false\">\n        \t\t<div ng-if=\"iconType==='mi'\" style=\"display:inline-block; margin:auto; line-height:initial;\">\n        \t\t\t<i class=\"material-icons mi-logout\" ng-class=\"icon\">logout</i>\n        \t\t</div>\n            </ui-icon>\n            <span ng-bind-html=\"GetButtonLabel()\"></span>\n            <div class=\"button-ripple\"></div>\n        </button>\n    </div>\n    <div class=\"video-container nr-dashboard-button container-right-margin\">\n        <md-tooltip md-direction=\"center\">Previous Frame</md-tooltip>\n        <button id=\"videoPreviousFrameButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple video-button\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"previousframebutton\">\n            <ui-icon ng-show=\"true\" icon=\"mi-skip_previous\" ng-style=\"{color:GetIconColor()}\" aria-hidden=\"false\">\n        \t\t<div ng-if=\"iconType==='mi'\" style=\"display:inline-block; margin:auto; line-height:initial;\">\n        \t\t\t<i class=\"material-icons mi-skip_previous\" ng-class=\"icon\">skip_previous</i>\n        \t\t</div>\n            </ui-icon>\n            <span ng-bind-html=\"GetButtonLabel()\"></span>\n            <div class=\"button-ripple\"></div>\n        </button>\n    </div>\n    <div class=\"video-container nr-dashboard-button\">\n        <md-tooltip md-direction=\"center\">Next Frame</md-tooltip>\n        <button id=\"videoNextFrameButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple video-button\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"nextframebutton\">\n            <ui-icon ng-show=\"true\" icon=\"mi-skip_next\" ng-style=\"{color:GetIconColor()}\" aria-hidden=\"false\">\n        \t\t<div ng-if=\"iconType==='mi'\" style=\"display:inline-block; margin:auto; line-height:initial;\">\n        \t\t\t<i class=\"material-icons  mi-skip_next\" ng-class=\"icon\">skip_next</i>\n        \t\t</div>\n            </ui-icon>\n            <span ng-bind-html=\"GetButtonLabel()\"></span>\n            <div class=\"button-ripple\"></div>\n        </button>\n    </div>\n</div>\n\n<script>\n    (function(scope) {\n        \n        //HTML Variables and Functions\n        scope.GetVSource = function(){return scope.vsource}\n        scope.GetIconColor = function(){return \"white\"}\n        scope.GetButtonLabel = function(){return \"\"}\n        scope.GetPlayPauseIcon = function(){\n            return \"mi-play_arrow\";\n        }\n        \n        scope.OnButtonClick = function(evt){\n            switch(evt.currentTarget.id){\n                case \"videoPlayPauseButton_ccd3e21e\":\n                    \n                    break;\n                case \"videoLeftLocatorButton_ccd3e21e\":\n                    \n                    break;\n                case \"videoRightLocatorButton_ccd3e21e\":\n                    \n                    break;\n                case \"videoPreviousFrameButton_ccd3e21e\":\n                    \n                    break;\n                case \"videoNextFrameButton_ccd3e21e\":\n                   \n                    break;\n                default:\n                    //console.log(evt.currentTarget.id);\n                    break;\n            }\n        }\n        \n        // Message Watcher\n        scope.$watch('msg', function (msg){\n            if (msg){\n                switch(msg.topic) {\n                    case \"source\":\n                        \n                        break;\n                    default:   \n                        break;\n                }\n            }\n        });\n    })(scope); \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 450,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f7f49c8728b85a22",
        "type": "debug",
        "z": "e3947d5bbc316eda",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "bbd264562450abf6",
        "type": "ui_template",
        "z": "e3947d5bbc316eda",
        "group": "c50b05a7746016ad",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .button-ripple{\n        overflow:hidden;\n        width:100%;\n        height:100%;\n        left:0;\n        top: 0;\n        position:absolute;\n        display:block;\n        z-index:1;\n        border-radius: inhirit;\n        background-clip: padding-box;\n        background-color: rgba(255,255,255,0);\n        transition: all 0.55s cubic-bezier(0,0,0.6,1) ;\n        -webkit-transform: translateZ(1);\n    }\n    .button-ripple:active{\n        left:50%;\n        width:0%;\n        background-color: rgba(255,255,255,0.1);\n        transition: all 0s;\n    }\n</style>\n\n<div class=\"nr-dashboard-button\">\n    <md-tooltip md-direction=\"center\">My Button</md-tooltip>\n    <button id=\"myButton_ccd3e21e\" class=\"md-raised md-button md-ink-ripple\" type=\"button\" ng-click=\"OnButtonClick($event)\" aria-label=\"mybutton\">\n        <span>my Label</span>\n        <div class=\"button-ripple\"></div>\n    </button>\n</div>\n\n<script type=\"text/javascript\">\n  \n(function(scope) {\n    scope.OnButtonClick = function(evt){\n        const cardPanelElement = evt.currentTarget.closest('ui-card-panel');\n        const divElement = evt.currentTarget.closest('div'); //the html result includes md-tooltip in div.nr-dashboard-button!!\n        const arrNames = cardPanelElement.id.split('_');\n        objPayload = {};\n        objPayload.tab = arrNames[0];\n        objPayload.group = arrNames[1];\n        objPayload.button = divElement.ariaLabel;\n        scope.send({payload: objPayload});\n    }\n    \n    scope.$watch('msg', function(msg) {\n        \n    });\n})(scope);\n\n</script>\n  \n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 360,
        "wires": [
            [
                "f7f49c8728b85a22"
            ]
        ]
    },
    {
        "id": "29554d9cf6288f39",
        "type": "ui_template",
        "z": "06ce0c67de868d70",
        "group": "150a555a50d00122",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope){\nvar testShowAlert = function ($mdDialog) {\nvar alert = $mdDialog.alert({\ntitle: 'Attention',\ntextContent: 'This is an example of how simple dialogs can be!',\nok: 'Close'\n});\n\n  $mdDialog\n    .show( alert )\n    .finally(function() {\n      alert = undefined;\n    });\n}\n\nscope.showAlert = function() {\n       var injector = angular.element(\"#nr-dashboard\").injector();\n       injector.invoke(testShowAlert,null,null);\n};\n\n})(scope);\n</script>\n<button ng-click=\"showAlert()\">Test Alert</button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f7f73fae9e56865b",
        "type": "ui_template",
        "z": "92f5052ca0054b2b",
        "group": "aca59d9b0a7fb387",
        "name": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<span ng-if=\"IsMaterialIcon()===false\">\n    <i class=\"{{GetIcon()}}\" ng-class=\"icon\"></i>\n</span> \n<span ng-if=\"IsMaterialIcon()===true\">\n    <ui-icon icon=\"{{GetIcon()}}\" aria-hidden=\"false\">\n        <i class=\"{{GetIcon()}}\" ng-class=\"icon\"></i>\n    </ui-icon>\n</span> \n\n<script>\n    (function(scope){\n        scope.icon = '';\n        scope.GetIcon = function(){\n            return scope.icon;\n        }\n        scope.IsMaterialIcon = function(){\n            if(scope.icon.slice(0,2)=='mi'){\n                return true;\n            }else{\n                return false;\n            }\n        }\n        \n        scope.$watch('msg', function(msg) {\n            try{\n                switch(msg.topic){\n                    case 'icon':\n                        scope.$applyAsync(function(){\n                            scope.icon = msg.payload;\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }catch(err){\n                \n            }\n            \n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "201b3f29ae494883",
        "type": "inject",
        "z": "92f5052ca0054b2b",
        "name": "font awesome icon",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "icon",
        "payload": "fa fa-fire",
        "payloadType": "str",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "f7f73fae9e56865b"
            ]
        ]
    },
    {
        "id": "b81c6907facd3e40",
        "type": "inject",
        "z": "92f5052ca0054b2b",
        "name": "material icon",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "icon",
        "payload": "mi-play_arrow",
        "payloadType": "str",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "f7f73fae9e56865b"
            ]
        ]
    },
    {
        "id": "8fbf6842f1528818",
        "type": "ui_template",
        "z": "a56bde124d673012",
        "group": "c7e1043144be7729",
        "name": "Content",
        "order": 7,
        "width": "15",
        "height": "10",
        "format": "\n<md-content layout=\"column\">\n    <md-list>\n        <md-list-item style=\"height: max-content\" ng-repeat=\"item in arrLog track by $index\">\n            <div class=\"md-list-item-text\" layout=\"column\">\n                <span style=\"text-decoration: underline\">{{item.label}}:</span>\n                <p style=\"white-space: pre-line;\">{{item.value}}</p>\n                <span style=\"height: 1em\"></span>\n            </div>\n        </md-list-item>\n    </md-list>\n</md-content>\n\n\n<script>\n    (function(scope) {\n        scope.arrLog = [];\n        \n        //handle arriving messages\n        scope.$watch('msg', function(msg) {\n\t\t\t    try{\n        \t\t\t    switch(msg.topic) {\n        \t\t\t        \n            \t\t\t    case \"Content\":\n                                scope.$applyAsync(()=>{\n                                    scope.arrLog = [];\n                                    msg.payload.forEach((currentValue, index, arr)=>{\n                                        scope.arrLog.push(currentValue);\n                                    })\n                                });\n                \t\t\t    break;\n                \t\t\t    \n                \t\t\tcase \"Clear\":\n                \t\t\t    scope.$applyAsync(()=>{\n                \t\t\t        scope.arrLog.length = 0;\n                \t\t\t    });\n                \t\t\t    break;\n\n                \t        default:\n            \t\t\t}\n\t\t\t    }catch(err){\n\t\t\t        //console.error(err);\n\t\t\t    }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1720,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2f096b8068cfbd2d",
        "type": "ui_button",
        "z": "a56bde124d673012",
        "name": "Clear Button",
        "group": "c2fc6f8ceca1aa7f",
        "order": 6,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Clear",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-trash",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Clear",
        "topicType": "str",
        "x": 990,
        "y": 640,
        "wires": [
            [
                "8fbf6842f1528818",
                "86056727c92d077a"
            ]
        ]
    },
    {
        "id": "3070c17a7eed1205",
        "type": "ui_button",
        "z": "a56bde124d673012",
        "name": "",
        "group": "c2fc6f8ceca1aa7f",
        "order": 4,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Set Content",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-play",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Content",
        "topicType": "str",
        "x": 990,
        "y": 320,
        "wires": [
            [
                "ab714e67bbc44e72"
            ]
        ]
    },
    {
        "id": "ab714e67bbc44e72",
        "type": "function",
        "z": "a56bde124d673012",
        "name": "",
        "func": "msg.payload = [\n    {label:'Numero de caso', value:1234567},\n    {label:'URL', value:''},\n    {label:'link a carpeta Gdrive', value:\"http://gdrive.com\"},\n    {label:'Salida al servicio', value:\"PUBLICO\"},\n    {label:'Accion de la integracion', value:\"Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer. Text messaging, or texting, is the act of composing and sending electronic messages, typically consisting of alphabetic and numeric characters, between two or more users of mobile devices, desktops/laptops, or another type of compatible computer\"}\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "86056727c92d077a",
                "8fbf6842f1528818"
            ]
        ]
    },
    {
        "id": "86056727c92d077a",
        "type": "debug",
        "z": "a56bde124d673012",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "41a861ece158e99a",
        "type": "inject",
        "z": "839d658c3816e9e7",
        "name": "Timestamp start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timeStart",
                "v": "",
                "vt": "date"
            },
            {
                "p": "timeEnd",
                "v": "",
                "vt": "date"
            },
            {
                "p": "duration",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Delay messen",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "b1b371708073e017"
            ]
        ]
    },
    {
        "id": "b1b371708073e017",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.1",
        "func": "msg.topic = \"Messung 1.1\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 140,
        "wires": [
            [
                "87b8e158cb8cdffd"
            ]
        ]
    },
    {
        "id": "87b8e158cb8cdffd",
        "type": "debug",
        "z": "839d658c3816e9e7",
        "name": "Debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 140,
        "wires": []
    },
    {
        "id": "4d5125948489cef1",
        "type": "inject",
        "z": "839d658c3816e9e7",
        "name": "Timestamp start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timeStart",
                "v": "",
                "vt": "date"
            },
            {
                "p": "timeEnd",
                "v": "",
                "vt": "date"
            },
            {
                "p": "duration",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Laufzeit messen",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "3457b69d600b8396",
                "2b4ea7628f7b8c2f"
            ]
        ]
    },
    {
        "id": "3457b69d600b8396",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.1",
        "func": "msg.topic = \"Messung 1.1\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 600,
        "wires": [
            [
                "cf86c13ab691212f"
            ]
        ]
    },
    {
        "id": "846be169acf696fc",
        "type": "debug",
        "z": "839d658c3816e9e7",
        "name": "Debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 660,
        "wires": []
    },
    {
        "id": "2b4ea7628f7b8c2f",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.1",
        "func": "msg.topic = \"Messung 2.1\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 680,
        "wires": [
            [
                "4e893e572e7eb6e7"
            ]
        ]
    },
    {
        "id": "cf86c13ab691212f",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.2",
        "func": "msg.topic = \"Messung 1.2\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "846be169acf696fc"
            ]
        ]
    },
    {
        "id": "4e893e572e7eb6e7",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.2",
        "func": "msg.topic = \"Messung 2.2\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 680,
        "wires": [
            [
                "846be169acf696fc"
            ]
        ]
    },
    {
        "id": "a5401b737fceb8d3",
        "type": "inject",
        "z": "839d658c3816e9e7",
        "name": "Timestamp start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timeStart",
                "v": "",
                "vt": "date"
            },
            {
                "p": "timeEnd",
                "v": "",
                "vt": "date"
            },
            {
                "p": "duration",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Laufzeit messen",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "46c94645614babd1"
            ]
        ]
    },
    {
        "id": "46c94645614babd1",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.1",
        "func": "msg.topic = \"Messung 1.1\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            [
                "7e5357a308c9a939"
            ]
        ]
    },
    {
        "id": "2525c6fdf9f5008f",
        "type": "debug",
        "z": "839d658c3816e9e7",
        "name": "Debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 380,
        "wires": []
    },
    {
        "id": "76a475056765b368",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.2",
        "func": "msg.topic = \"Messung 1.2\"\nnode.warn(msg.topic);\nmsg.timeEnd = new Date().valueOf();\nmsg.duration = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 380,
        "wires": [
            [
                "2525c6fdf9f5008f"
            ]
        ]
    },
    {
        "id": "15b2252f3f097f15",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "Timestamp = ms seit 1. Januar 1970 00:00:00 GMT",
        "info": "Als Zeitpunkt wird der Unix-Timestamp mitgegeben.\nDas sind die Millisekunden seit 1. Januar 1970 00:00:00 Uhr Greenwich Mean Time ",
        "x": 270,
        "y": 100,
        "wires": []
    },
    {
        "id": "4b150f1f75ef0908",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "Timestamp in JS = new Date().valueOf()",
        "info": "Der UTC-Timestamp lÃ¤Ãt sich in Javascript Ã¼ber das aktuelle Date-Object ermitteln, mit seiner Funktion valueOf():\n\n`const objDate = new Date();`<br>\n`const timestamp = objDate.valueOf();`",
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "85f4e52b4bdefeaf",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "Durch den Event-Loop enstehen in der Durchlaufzeit kleine Ungenauigkeiten im ms-Bereich",
        "info": "in Node-Red ist die AusfÃ¼hrung von Nodes zeitlich nicht genau planbar. Timer und Funktionen werden in eine Queue geschoben und wann der Event-Loop sie ausfÃ¼hrt differiert im Millisekunden-Bereich.",
        "x": 1350,
        "y": 100,
        "wires": []
    },
    {
        "id": "7e5357a308c9a939",
        "type": "delay",
        "z": "839d658c3816e9e7",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 380,
        "wires": [
            [
                "76a475056765b368"
            ]
        ]
    },
    {
        "id": "66d58276d189e3c3",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "Event-Loop aufgedrÃ¶selt (siehe Info!)",
        "info": "* `BUTTON EVENT ==>` QUEUE(Callback)\n\n* `NEXT LOOP ==>` EXECUTE Callback `==>` QUEUE(Timestamp start)\n\n* `NEXT LOOP ==>` EXECUTE Timestamp start (EXECUTE Timer)\n\n* `TIMER EVENT (nach 0 Sek.) ==>` QUEUE(Callback)\n\n* `NEXT LOOP ==>` EXECUTE Callback (Eine Message anlegen) `==>` QUEUE(Messung 1.1)\n\n* `NEXT LOOP ==>` EXECUTE Messung 1.1 (Message verÃ¤ndern) `==>` QUEUE(VerzÃ¶gerung 5 s)\n\n* `NEXT LOOP ==>` EXECUTE VerzÃ¶gerung 5 s (EXECUTE Timer)\n\n* `TIMER EVENT (nach 5 Sek.) ==>` QUEUE(Callback)\n\n* `NEXT LOOP ==>` EXECUTE Callback `==>` QUEUE(Messung 1.2)\n\n* `NEXT LOOP ==>` EXECUTE Messung 1.2 (die Messag verÃ¤ndern) `==>` QUEUE(Debug)\n\n* `NEXT LOOP ==>` EXECUTE \"Debug\" (Message in's Debug Log schreiben)\n\n",
        "x": 220,
        "y": 340,
        "wires": []
    },
    {
        "id": "4921e1045c7c250c",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "PARALLELE AUFSPLITTUNG: die Reihenfolge, wie parallele Verbindungen angelegt werden, wirkt sich auf die AusfÃ¼hrungs-Reihenfolge der Nodes aus",
        "info": "## Parallele AusfÃ¼hrung:\n\n\"Timestamp start\" hat 2 parallele Verbindungen zu den nÃ¤chsten Nodes (Messung 1.1, Messung 1.2).\n\nDer zuerst verbundene Node wird auch zuerst ausgefÃ¼hrt.\n<br><br>\n\n## Serielle AusfÃ¼hrung:\n\nSeriell fassen wir die Nodes in 4 Ebenen zusammen: \n * A: Timestamp start\n * B: Messung 1.1, Messung 2.1\n * C: Messung 2.1, Messung 2.2 \n * D: Debug 3\n\n### AusfÃ¼hrungs-Reihenfolge:\nA ==> B ==> C ==>  D\n\n\n\n\n",
        "x": 580,
        "y": 560,
        "wires": []
    },
    {
        "id": "e3897e3ea5bffae8",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "SERIELLE ANORDNUNG: Jedesmal, wenn ein Node durchlaufen ist, wird der nÃ¤chste in die set-Immediate-Queue des Event Loops geschoben ",
        "info": "\nWird ein Node ausgefÃ¼hrt, wird danach der nÃ¤chste Node in die Immediate-Queue des Event-Loops geschoben.",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "531458f82cf8a7fa",
        "type": "inject",
        "z": "839d658c3816e9e7",
        "name": "Timestamp start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timeStart",
                "v": "",
                "vt": "date"
            },
            {
                "p": "timeEnd",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Laufzeit messen",
        "x": 160,
        "y": 960,
        "wires": [
            [
                "bd64a082ed6417d7",
                "933f8944aaa42365"
            ]
        ]
    },
    {
        "id": "bd64a082ed6417d7",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.1 (Array mit 100000 Items)",
        "func": "msg.topic = \"Messung 1.1\"\nmsg.timeEnd = new Date().valueOf();\nmsg.duration11 = msg.timeEnd - msg.timeStart;\nmsg.payload = new Array(100000).fill(\"Ausgangswert\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "59f2e366661b9c17"
            ]
        ]
    },
    {
        "id": "15da51a4547e75bf",
        "type": "debug",
        "z": "839d658c3816e9e7",
        "name": "Debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1040,
        "wires": []
    },
    {
        "id": "59f2e366661b9c17",
        "type": "split",
        "z": "839d658c3816e9e7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 960,
        "wires": [
            [
                "969bfc26735c3425"
            ]
        ]
    },
    {
        "id": "933f8944aaa42365",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.1",
        "func": "msg.topic = \"Messung 2.1\"\nmsg.duration21 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "56208765768dc4bc"
            ]
        ]
    },
    {
        "id": "56208765768dc4bc",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.2",
        "func": "msg.topic = \"Messung 2.2\"\nmsg.duration22 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1040,
        "wires": [
            [
                "a14464b14a98c3bb"
            ]
        ]
    },
    {
        "id": "30b60d19d13a5654",
        "type": "join",
        "z": "839d658c3816e9e7",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1250,
        "y": 960,
        "wires": [
            [
                "695cfcb18b8f3df7"
            ]
        ]
    },
    {
        "id": "a14464b14a98c3bb",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.3",
        "func": "msg.topic = \"Messung 2.3\"\nmsg.duration23 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "15da51a4547e75bf"
            ]
        ]
    },
    {
        "id": "969bfc26735c3425",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.2",
        "func": "msg.topic = \"Messung 1.2\"\n\nmsg.payload = msg.payload + \" wurde geÃ¤ndert\";\nif(msg.parts.index==0){\n    msg.duration12Anfang = new Date().valueOf() - msg.timeStart;\n}else{\n    msg.duration12Ende = new Date().valueOf() - msg.timeStart; \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 960,
        "wires": [
            [
                "30b60d19d13a5654"
            ]
        ]
    },
    {
        "id": "cbe52fffbba823a5",
        "type": "inject",
        "z": "839d658c3816e9e7",
        "name": "Timestamp start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timeStart",
                "v": "",
                "vt": "date"
            },
            {
                "p": "timeEnd",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Laufzeit messen",
        "x": 160,
        "y": 1320,
        "wires": [
            [
                "8f543bdfc3ae7f39",
                "1a97fb63ac9ba67b"
            ]
        ]
    },
    {
        "id": "8f543bdfc3ae7f39",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.1 (Array mit 100000 Items)",
        "func": "msg.topic = \"Messung 1.1\"\nmsg.duration11 = new Date().valueOf() - msg.timeStart;\nmsg.payload = new Array(100000).fill(\"Ausgangswert\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1320,
        "wires": [
            [
                "a9676d2a5b027176"
            ]
        ]
    },
    {
        "id": "f2ad4fe039d1adf0",
        "type": "debug",
        "z": "839d658c3816e9e7",
        "name": "Debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1400,
        "wires": []
    },
    {
        "id": "1a97fb63ac9ba67b",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.1",
        "func": "msg.topic = \"Messung 2.1\"\nmsg.duration21 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1400,
        "wires": [
            [
                "0883bd0956685196"
            ]
        ]
    },
    {
        "id": "0883bd0956685196",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.2",
        "func": "msg.topic = \"Messung 2.2\"\nmsg.duration22 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1400,
        "wires": [
            [
                "668e6a096e61bd50"
            ]
        ]
    },
    {
        "id": "0a914066c1763686",
        "type": "join",
        "z": "839d658c3816e9e7",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1350,
        "y": 1320,
        "wires": [
            [
                "7970fe719c0b007f"
            ]
        ]
    },
    {
        "id": "668e6a096e61bd50",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.3",
        "func": "msg.topic = \"Messung 2.3\"\nmsg.duration23 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1400,
        "wires": [
            [
                "f2ad4fe039d1adf0"
            ]
        ]
    },
    {
        "id": "3a722790b7aa89e6",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "Split-Nodes fÃ¼hren eine Schleife Ã¼ber das gesamte Array aus und schieben fÃ¼r jeden Item den nÃ¤chsten Node in die set-Immediate-Queue. Das blockiert bei riesigen Arrays den parallelen Zweig.",
        "info": "blockiert parallele Nodes stark",
        "x": 690,
        "y": 900,
        "wires": []
    },
    {
        "id": "a9676d2a5b027176",
        "type": "mp-function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.2 (Split in eigenem Node.js Prozess)",
        "rqs": "",
        "func": "\nfor(let i=0;i<msg.payload.length;i++){\n    let msgClone = {};\n    msgClone.topic = msg.topic;\n    msgClone.timeStart = msg.timeStart;\n    msgClone.duration11 = msg.delay11;\n    if(i==0){\n        msgClone.duration12Start = new Date().valueOf() - msg.timeStart;\n    }else{\n        msgClone.duration12Ende = new Date().valueOf() - msg.timeStart;\n    }\n    msgClone.payload = msg.payload[i];\n    msgClone.parts = {};\n    msgClone.parts.type = \"array\";\n    msgClone.parts.count = msg.payload.length;\n    msgClone.parts.len = 1;\n    msgClone.parts.index = i;\n    msgClone.parts.id = msg._msgid;\n    node.send(msgClone);\n}\n",
        "persistent": true,
        "outputs": 1,
        "threads": 1,
        "noerr": 0,
        "x": 880,
        "y": 1320,
        "wires": [
            [
                "8583c3a55f4d7f29"
            ]
        ]
    },
    {
        "id": "8583c3a55f4d7f29",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.3",
        "func": "msg.topic = \"Messung 1.3\"\nmsg.payload = msg.payload + \" wurde geÃ¤ndert\";\nif(msg.parts.index==0){\n    msg.duration13Start = new Date().valueOf() - msg.timeStart;\n}else{\n    msg.duration13Ende = new Date().valueOf() - msg.timeStart; \n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1320,
        "wires": [
            [
                "0a914066c1763686"
            ]
        ]
    },
    {
        "id": "6c0feb97568eaefe",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "md-function-Nodes mit einprogrammierter Schleife Ã¼ber das Array blockieren den parallelen Zweig nicht. Der Node lÃ¤uft in einem anderen Prozess ab. Aber die Message-Ãbergabe in und aus dem Node kostet Zeit",
        "info": "blockiert parallele Nodes nicht, muss aber am Eingang vor hohen Taktraten geschÃ¼tzt werden (hier nicht der Fall!)\n\nBenÃ¶tigt zur Abarbeitung des Arrays doppelt so lang, wie mittels Split-Join Nodes",
        "x": 750,
        "y": 1260,
        "wires": []
    },
    {
        "id": "7970fe719c0b007f",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.4",
        "func": "msg.topic = \"Messung 1.4\"\nmsg.duration14 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1320,
        "wires": [
            [
                "f2ad4fe039d1adf0"
            ]
        ]
    },
    {
        "id": "695cfcb18b8f3df7",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.3",
        "func": "msg.topic = \"Messung 1.3\"\nmsg.duration13 = new Date().valueOf() - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 960,
        "wires": [
            [
                "15da51a4547e75bf"
            ]
        ]
    },
    {
        "id": "5bf81ce259910494",
        "type": "inject",
        "z": "839d658c3816e9e7",
        "name": "Timestamp start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timeStart",
                "v": "",
                "vt": "date"
            },
            {
                "p": "timeEnd",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Laufzeit messen",
        "x": 160,
        "y": 1780,
        "wires": [
            [
                "6e9696f91d3fc4c1",
                "e5666ac6e3592b45"
            ]
        ]
    },
    {
        "id": "6e9696f91d3fc4c1",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.1 (Array mit 100000 Items)",
        "func": "msg.topic = \"Messung 1.1\"\nmsg.timeEnd = new Date().valueOf();\nmsg.duration11 = msg.timeEnd - msg.timeStart;\nmsg.payload = new Array(100000).fill(\"Ausgangswert\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1780,
        "wires": [
            [
                "4bb669bcfe173505"
            ]
        ]
    },
    {
        "id": "17d4f4617b63fc68",
        "type": "debug",
        "z": "839d658c3816e9e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1860,
        "wires": []
    },
    {
        "id": "4bb669bcfe173505",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 1.2 (Split in 100er Chunks)",
        "func": "const arrPart = []\nlet startIdx;\nlet endIdx;\n\nif(msg.trigger === undefined){\n    context.set('array', msg.payload);\n    msg.parts = {};\n    msg.parts.type = \"array\";\n    msg.parts.count = Math.ceil(msg.payload.length/100);\n    msg.parts.len = 100;\n    msg.parts.index = 0;\n    msg.parts.id = msg._msgid;\n    msg.arraylength = msg.payload.length;\n    startIdx = msg.parts.index;\n}else{\n    startIdx = msg.parts.index * 100\n}\n\n//Unterteilung in 100er chunks\nendIdx = startIdx + 100;\nif(msg.arraylength < endIdx){\n    endIdx = msg.arraylength;\n    msg.parts.len = endIdx - startIdx;\n}\n\nfor(let i=startIdx; i<endIdx; i++){\n    //************************************************************\n    //HIER DIE AUFGABE, WAS FÃR JEDEN ITEM GEMACHT WIRD!!!!!!\n    if(msg.parts.index==0){\n        msg.duration12Start = new Date().valueOf() - msg.timeStart;\n    }else{\n        msg.duration12Ende = new Date().valueOf() - msg.timeStart; \n    }\n    arrPart.push(context.get(\"array\")[i] + \" wurde geÃ¤ndert\");\n    //************************************************************\n}\n\nmsg.payload = arrPart;\nmsg._msgid = RED.util.generateId();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1780,
        "wires": [
            [
                "375d5a507181218e"
            ]
        ]
    },
    {
        "id": "375d5a507181218e",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Msg Control (While Do)",
        "func": "if(msg.parts.index < msg.parts.count-1){\n    let triggerMsg = RED.util.cloneMessage(msg);\n    triggerMsg.trigger = true;\n    triggerMsg.parts.index++;\n    return[msg, triggerMsg];\n}\nreturn [msg, null];\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1700,
        "wires": [
            [
                "abdc75fee10c8291"
            ],
            [
                "4bb669bcfe173505"
            ]
        ]
    },
    {
        "id": "abdc75fee10c8291",
        "type": "join",
        "z": "839d658c3816e9e7",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1130,
        "y": 1700,
        "wires": [
            [
                "17d4f4617b63fc68"
            ]
        ]
    },
    {
        "id": "e5666ac6e3592b45",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.1",
        "func": "msg.topic = \"Messung 2.1\"\nmsg.timeEnd = new Date().valueOf();\nmsg.duration21 = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1860,
        "wires": [
            [
                "6d7aeefef80e5b92"
            ]
        ]
    },
    {
        "id": "6d7aeefef80e5b92",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.2",
        "func": "msg.topic = \"Messung 2.2\"\nmsg.timeEnd = new Date().valueOf();\nmsg.duration22 = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1860,
        "wires": [
            [
                "6031269dfd3065d3"
            ]
        ]
    },
    {
        "id": "6031269dfd3065d3",
        "type": "function",
        "z": "839d658c3816e9e7",
        "name": "Messung 2.3",
        "func": "msg.topic = \"Messung 2.3\"\nmsg.timeEnd = new Date().valueOf();\nmsg.duration23 = msg.timeEnd - msg.timeStart;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1860,
        "wires": [
            [
                "17d4f4617b63fc68"
            ]
        ]
    },
    {
        "id": "7482684a98383440",
        "type": "comment",
        "z": "839d658c3816e9e7",
        "name": "Hier: Die ersten 100 Array-Items im Function Node bearbeiten. Dann Absplitten und in den Join Node weiterleiten. Wieder in den Function Node und die nÃ¤chsten 100 Items bearbeiten. Diese absplitten ...usw.  ==> Kein Blocking paralleler Zweige + schnelle Abarbeitung riesiger Arrays",
        "info": "blockiert parallele Nodes stark",
        "x": 970,
        "y": 1660,
        "wires": []
    }
]